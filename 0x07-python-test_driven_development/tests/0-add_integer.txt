"""
This module defines an integer addition function ``add_integer(a, b=98)``.
Usage
=====
``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.
"""

>>> add_integer = __import__('0-add_integer').add_integer

# Test case 1: Testing the addition of two positive integers
>>> add_integer(4, 5)
9

# Test case 2: Testing the addition of one positive and one negative integer
>>> add_integer(3, -5)
-2

# Test case 3: Testing the addition of two negative integers
>>> add_integer(-4, -2)
-6

# Test case 4: Testing the addition of two positive floats
>>> add_integer(6.3, 8.5)
14

# Test case 5: Testing the addition of an integer and a float
>>> add_integer(7, 2.9)
9

# Test case 6: Testing the addition of two negative floats
>>> add_integer(-3.5, -2.7)
-5

# Test case 7: Testing the addition of a negative integer and a positive float
>>> add_integer(-5, 5.8)
0

# Test case 8: Testing when 'a' is a string (should raise a TypeError)
>>> add_integer('hi', 7)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

# Test case 9: Testing when 'a' is an integer and 'b' is not provided (default value of b is used)
>>> add_integer(7)
105

# Test case 10: Testing when 'a' is None (should raise a TypeError)
>>> add_integer(None)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

# Test case 11: Testing when 'a' is None and 'b' is provided (should raise a TypeError)
>>> add_integer(None, 7)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

# Test case 12: Testing when both 'a' and 'b' are strings (should raise a TypeError)
>>> add_integer('hi', 'you')
Traceback (most recent call last):
  ...
TypeError: a must be an integer

# Test case 13: Testing when 'a' is a float with an invalid string value (should raise a ValueError)
>>> add_integer(float('hi'))
Traceback (most recent call last):
  ...
ValueError: could not convert string to float: 'hi'

# Test case 14: Testing when 'b' is positive infinity (should raise an OverflowError)
>>> add_integer(float('inf'))
Traceback (most recent call last):
  ...
OverflowError: cannot convert float infinity to integer

# Test case 15: Testing when 'b' is NaN (should raise a ValueError)
>>> add_integer(float('nan'))
Traceback (most recent call last):
  ...
ValueError: cannot convert float NaN to integer


# You can run this doctest by using the following command in your terminal:
# python -m doctest -v add_integer.txt
